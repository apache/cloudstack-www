"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8681],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),u=i,d=c["".concat(s,".").concat(u)]||c[u]||h[u]||r;return a?n.createElement(d,o(o({ref:t},m),{},{components:a})):n.createElement(d,o({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},74350:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={title:"Apache CloudStack Project Bylaws"},o="Apache CloudStack Project Bylaws",l={type:"mdx",permalink:"/bylaws",source:"@site/src/pages/bylaws.md",title:"Apache CloudStack Project Bylaws",description:"1. Introduction",frontMatter:{title:"Apache CloudStack Project Bylaws"}},s=[],p={toc:s},m="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"apache-cloudstack-project-bylaws"},"Apache CloudStack Project Bylaws"),(0,i.kt)("h2",null,"1. Introduction"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"1.1\nThis document defines the bylaws under which the Apache CloudStack project\noperates. It defines the roles and responsibilities of the project, who may\nvote, how voting works, how conflicts are resolved and specifies the rules for\nspecific project actions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'1.2. CloudStack is a project of the Apache Software Foundation. The foundation\nholds the trademark on the name "CloudStack" and copyright on Apache code\nincluding the code in the CloudStack codebase. The foundation FAQ explains the\noperation and background of the foundation.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'1.3. CloudStack operates under a set of principles known collectively as the\n"Apache Way". Those principles are: Transparency, consensus, non-affiliation,\nrespect for fellow developers, and meritocracy, in no specific order.'))),(0,i.kt)("h2",null,"2. Roles and Responsibilities"),(0,i.kt)("p",null,"   Apache projects define a set of roles with\nassociated rights and\nresponsibilities. These roles govern what tasks an individual may perform\nwithin the project. The roles are defined in the following sections:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.1. Users.\nThe most important participants in the project are people who use our software.\nUsers can contribute to the Apache projects by providing feedback to developers\nin the form of bug reports and feature suggestions. As well, users can\nparticipate in the Apache community by helping other users on mailing lists and\nuser support forums. Users who participate in the project through any mechanism\nare considered to be Contributors.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.2. Contributors\nContributors are all of the volunteers who are contributing time, code,\ndocumentation, or resources to the CloudStack Project. Contributions are not\njust code, but can be any combination of documentation, testing, user support,\ncode, code reviews, bug reporting, community organizing, project marketing, or\nnumerous other activities that help promote and improve the Apache CloudStack\nproject and community."),(0,i.kt)("p",{parentName:"li"}," A Contributor that makes sustained, welcome contributions to the project may be\ninvited to become a Committer by the PMC. The invitation will be at the\ndiscretion of a supporting PMC member.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.3. Committers\nThe project's Committers are responsible for the project's technical\nmanagement. Committers have access to all project source control repositories.\nCommitters may cast binding votes on any technical discussion regarding the\nproject (or any sub-project)."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.3.1. Committer access is by invitation only and must be approved by a lazy\nconsensus of the active PMC members.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.3.2. All Apache Committers are required to have a signed Individual\nContributor License Agreement (ICLA) on file with the Apache Software\nFoundation. There is a Committer FAQ which provides more details on the\nrequirements for Committers at Apache.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.3.3. A Committer who makes a sustained contribution to the project may be\ninvited by the PMC to become a member of the PMC, after approval of the PMC.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4. Project Management Committee"),(0,i.kt)("p",{parentName:"li"},"  The Project Management Committee (PMC) for Apache CloudStack is responsible to\nthe board and the ASF for the management and oversight of the Apache CloudStack\ncodebase."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1. The responsibilities of the PMC include:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.1. Fostering, supporting and growing the project's community.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.2. Deciding what is distributed as products of the Apache CloudStack project. In particular all releases must be approved by the PMC.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.3. Maintaining the project's shared resources, including the codebase repository, mailing lists, websites.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.4. Speaking on behalf of the project.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.5. Resolving license disputes regarding products of the project.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.6. Nominating new PMC members and committers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.7. Maintaining these bylaws and other guidelines of the project.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.1.8. Managing and protecting the project's trademarks and brand.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.2. Membership of the PMC is by invitation only and must be approved by a\nlazy consensus of active PMC members.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'2.4.3. A PMC member is considered "emeritus" by their own declaration. An\nemeritus member may request reinstatement to the PMC. Such reinstatement is\nsubject to lazy consensus of the active PMC members.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'2.4.4. "Active PMC members" are all non-emeritus PMC members.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.4. The chair of the PMC is appointed by the ASF board. The chair is an\noffice holder of the Apache Software Foundation (Vice President, Apache\nCloudStack) and has primary responsibility to the board for the management of\nthe projects within the scope of the CloudStack PMC. The chair reports to the\nboard quarterly on developments within the CloudStack project. The chair must\nbe an active PMC member.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.5. If the current chair of the PMC resigns, or the term of the current\nchair expires, the PMC will attempt to reach consensus on a new chair through\ndiscussion, confirming that consensus via a vote to recommend a new chair using\na lazy 2/3 majority voting method. In the case that consensus is not achieved,\nthe PMC will vote for a chair using Single Transferable Vote (STV) voting. Due\nto the fact that the discussions are about specific individuals, this vote\nwould be held on the cloudstack-private mailing list. The decision must be\nratified by the Apache board.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2.4.6. The role of PMC chair will have a one year term.  The intention of this\nterm is to allow for a rotation of the role amongst the PMC members.  This\nintention does not prohibit the PMC from selecting the same chair to serve\nconsecutive terms."))))),(0,i.kt)("h2",null,"3. Decision Making"),(0,i.kt)("p",null,"This section defines how voting is performed, the types of approvals, and which\ntypes of decision require which type of approval."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1. Voting"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.1. Decisions regarding the project are made by votes on the primary project\ndevelopment mailing list (",(0,i.kt)("a",{parentName:"p",href:"mailto:dev@cloudstack.apache.org"},"dev@cloudstack.apache.org"),"). Where necessary, PMC\nvoting may take place on the private CloudStack PMC mailing list. Votes are\nclearly indicated by subject line starting with ","[","VOTE","]",". Votes may contain\nmultiple items for approval and these should be clearly separated. Voting is\ncarried out by replying to the vote mail.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.2. Voting may take four flavors:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.2.1. ","+",'1 "Yes," "Agree," or "the action should be performed." In general, this vote also indicates a willingness on the behalf of the voter in "making it happen"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.2.2. ","+","0 This vote indicates a willingness for the action under consideration to go ahead. The voter, however will not be able to help.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.2.3. ","-","0 This vote indicates that the voter does not, in general, agree with the proposed action but is not concerned enough to prevent the action going ahead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.2.4. ","-","1 This is a negative vote. On issues where consensus is required, this vote counts as a veto if binding. All vetoes must contain an explanation of why the veto is appropriate. Vetoes with no explanation are void. It may also be appropriate for a ","-","1 vote to include an alternative course of action.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.3. All participants in the CloudStack project are encouraged to show their\nagreement with or against a particular action by voting. For technical\ndecisions, only the votes of active committers are binding. Non-binding votes\nare still useful for those with binding votes to understand the perception of\nan action in the wider CloudStack community. For PMC decisions, only the votes\nof PMC members are binding.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.4. Voting can also be applied to changes made to the CloudStack codebase.\nThese typically take the form of a veto (-1) in reply to the commit message\nsent when the commit is made.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.1.5. Non-binding ","-","1 votes are not considered to be vetos for any decision.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.2. Approvals"),(0,i.kt)("p",{parentName:"li"},"  There are three types of approvals that can be sought. Section 3.4 describes\nactions and types of approvals needed for each action."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.2.1. Lazy Consensus - Lazy consensus requires 3 binding ","+","1 votes and no\nbinding ","-","1 votes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.2.2. Lazy Majority - A lazy majority vote requires 3 binding ","+","1 votes and\nmore binding ","+","1 votes than binding ","-","1 votes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.2.3. Lazy 2/3 Majority - Lazy 2/3 majority votes requires at least 3 binding\nvotes and twice as many binding ","+","1 votes as binding ","-","1 votes.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.3. Vetoes"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.3.1. Vetoes are only possible in a lazy consensus vote.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.3.2. A valid, binding veto cannot be overruled. If a veto is cast, it must be\naccompanied by a valid reason explaining the reasons for the veto. The validity\nof a veto, if challenged, can be confirmed by anyone who has a binding vote.\nThis does not necessarily signify agreement with the veto - merely that the\nveto is valid.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.3.3. If you disagree with a valid veto, you must lobby the person casting the\nveto to withdraw their veto. If a veto is not withdrawn, any action that has\nbeen vetoed must be reversed in a timely manner.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4. Actions"),(0,i.kt)("p",{parentName:"li"},"  This section describes the various actions which are undertaken within the\nproject, the roles that have the right to start a vote on the action, the\ncorresponding approval required for that action and those who have binding\nvotes over the action."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.1. Technical Decisions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A technical decision is any decision that involves changes to the source code that we distribute in our official releases.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Technical decisions should normally be made by the entire community using discussion-lead consensus gathering, and not through formal voting.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Technical decisions must be made on the project development mailing list.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"During the consensus gathering process, technical decisions may be vetoed by any Committer with a valid reason.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If a formal vote is started for a technical decision, the vote will be held as a lazy consensus of active committers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any user, contributor, committer, or PMC member can initiate a technical decision making process.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.2. Non-Technical Decisions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A non-technical decisions is any decision that does not involve changes to the source code that we distribute in our official releases (excluding questions of trademark usage).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Non-technical decisions should normally be made by the entire community using discussion-lead consensus-building, and not through formal voting.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Non-technical decisions can be made on whichever project mailing list is most appropriate.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Non-technical decisions cannot be vetoed, but if there is strong opposition a formal vote can be used to resolve the dispute.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If a formal vote is started for a non-technical decision, the vote will be held as a lazy 2/3 majority of active committers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any user, contributor, committer, or PMC member can initiate a non-technical decision making process.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.3. Release Plan"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Defines the timetable and work items for a release. The plan also nominates a Release Manager.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A lazy majority of active committers is required for approval.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active committer or PMC member may call a vote. The vote must occur on the project development mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.4. Product Release"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When a release of one of the project's products is ready, a vote is required to accept the release as an official release of the project.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy Majority of active PMC members is required for approval.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active committer or PMC member may call a vote. The vote must occur on the project development mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.5. Adoption of New Codebase"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When the codebase for an existing, released product is to be replaced with an alternative codebase. If such a vote fails to gain approval, the existing code base will continue.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This also covers the creation of new sub-projects within the project.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy 2/3 majority of active PMC members.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active committer or PMC member may call a vote. The vote must occur on the project development mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.6. New Committer"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When a new committer is proposed for the project.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy consensus of active PMC members.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active PMC member may call a vote. The vote must occur on the PMC private mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.7. New PMC Member"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When a committer is proposed for the PMC.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy consensus of active PMC members.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active PMC member may call a vote. The vote must occur on the PMC private mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.8. Committer Removal"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When removal of commit privileges is sought. Note: Such actions will also be referred to the ASF board by the PMC chair")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy 2/3 majority of active PMC members (excluding the committer in question if a member of the PMC).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active PMC member may call a vote. The vote must occur on the PMC private mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.9. PMC Member Removal"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When removal of a PMC member is sought. Note: Such actions will also be referred to the ASF board by the PMC chair.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy 2/3 majority of active PMC members (excluding the member in question)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active PMC member may call a vote. The vote must occur on the PMC private mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.10. Modifying Bylaws"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Modifying this document.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy majority of active PMC members")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any active committer or PMC member may call a vote. The vote must occur on the project development mailing list.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.4.11. Trademark Usage Approvals"),(0,i.kt)("p",{parentName:"li"},"Our project maintains a formal Trademark Usage Guidelines document, which\nserves as an additive reference to the Apache Software Foundation's trademark\npolicies. The Apache CloudStack PMC has had approval authority delegated to it\nfor requests from third parties to use our trademarks. It is the PMC's\nresponsibility to provide these approvals, and to ensure that any requests\nare in compliance with both the project and the foundation's trademark\nusage policies."),(0,i.kt)("p",{parentName:"li"},"The CloudStack Trademark Guidelines specify how a requester is expected to\nrequest permission for usage of the trademarks."),(0,i.kt)("p",{parentName:"li"},"The process of approval will typically be as follows:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A request is made that includes the required information for the PMC to make a decision.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A PMC member reviews the request and provides an initial acknowledgement response to the requester.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If no PMC member raises a concern after 72 hours, the requester can assume approval.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In situations where a concern is raised, the PMC member is expected to inform the\nrequester that there is some discussion that needs to be had prior to approval\nfrom the PMC.  This notice serves to end the assumed approval after 72 hours."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"}," After raising a concern, the PMC member in question is required to forward the\n concern to private@cloudstack.apache.org, explaining the issue that they have\n with the request.  The use of private@cloudstack.apache.org for discussing the\n request is to allow the PMC to deliberate without confusing the requester, and\n to ensure that a formal approval or denial is clear at the end of the\n discussion.\n\n The PMC will then attempt to achieve consensus on how the request for approval\n will be answered.  The requester may be asked for more information to help the\n PMC make a decision, may be asked to make a change to the proposal in order to\n gain approval, or may have their request be denied.\n\n If consensus is not achieved within the PMC by discussion, then a formal VOTE\n can be called as a Lazy 2/3 majority of voting PMC members.\n\n Votes related to trademark usage approvals may be performed on the\n private@cloudstack.apache.org mailing list.\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"3.5. Voting Timeframes"),(0,i.kt)("p",{parentName:"li"},"  Formal votes are open for a period of at least 72 hours to allow all active\nvoters time to consider the vote."))))}c.isMDXComponent=!0}}]);